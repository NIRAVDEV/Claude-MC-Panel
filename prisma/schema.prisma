// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  credits       Int       @default(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  servers          Server[]
  transactions     Transaction[]
  supportTickets   SupportTicket[]
  referralCode     String?          @unique
  referredBy       String?
  referrals        User[]           @relation("UserReferrals")
  referrer         User?            @relation("UserReferrals", fields: [referredBy], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Node {
  id          String     @id @default(cuid())
  name        String
  host        String
  port        Int        @default(2376)
  region      String
  status      NodeStatus @default(OFFLINE)
  maxRam      Int        // in GB
  maxStorage  Int        // in GB
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  servers Server[]

  @@map("nodes")
}

model Server {
  id          String       @id @default(cuid())
  name        String
  software    ServerType   @default(VANILLA)
  version     String       @default("1.20.4")
  ram         Int          // in GB
  storage     Int          // in GB
  port        Int?
  status      ServerStatus @default(STOPPED)
  containerId String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  nodeId String?
  node   Node?   @relation(fields: [nodeId], references: [id])

  backups Backup[]

  @@map("servers")
}

model Backup {
  id        String   @id @default(cuid())
  name      String
  size      Int      // in bytes
  createdAt DateTime @default(now())

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@map("backups")
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  amount      Int
  description String
  createdAt   DateTime        @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model SupportTicket {
  id          String       @id @default(cuid())
  subject     String
  description String       @db.Text
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages TicketMessage[]

  @@map("support_tickets")
}

model TicketMessage {
  id        String   @id @default(cuid())
  message   String   @db.Text
  isStaff   Boolean  @default(false)
  createdAt DateTime @default(now())

  ticketId String
  ticket   SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_messages")
}

// Credit Package model for paid credit options
model CreditPackage {
  id          String  @id @default(cuid())
  name        String
  credits     Int
  price       Float   // in USD
  isPopular   Boolean @default(false)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("credit_packages")
}

// Ad Campaign model for credit earning
model AdCampaign {
  id          String  @id @default(cuid())
  name        String
  url         String
  credits     Int
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ad_campaigns")
}

// User ad interactions for tracking
model UserAdInteraction {
  id          String   @id @default(cuid())
  userId      String
  campaignId  String
  creditsEarned Int
  createdAt   DateTime @default(now())

  @@unique([userId, campaignId])
  @@map("user_ad_interactions")
}

enum Role {
  USER
  ADMIN
}

enum NodeStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum ServerType {
  VANILLA
  PAPER
  SPIGOT
  FORGE
  FABRIC
  BUKKIT
  PURPUR
}

enum ServerStatus {
  STARTING
  RUNNING
  STOPPING
  STOPPED
  ERROR
}

enum TransactionType {
  EARNED_AD
  EARNED_TASK
  EARNED_REFERRAL
  EARNED_DAILY
  SPENT_SERVER
  SPENT_UPGRADE
  PURCHASED
  REFUND
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}