// schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum ServerStatus {
  STOPPED
  STARTING
  RUNNING
  STOPPING
  CRASHED
}

enum TransactionType {
  CREDIT_PURCHASE
  AD_REWARD
  TASK_REWARD
  SERVER_PAYMENT
  REFUND
}

enum TaskType {
  SURVEY
  VIDEO_WATCH
  APP_INSTALL
  SOCIAL_FOLLOW
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?   // For Lucia Auth
  name          String?
  role          UserRole  @default(USER)
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  servers       Server[]
  transactions  Transaction[]
  tickets       Ticket[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Node {
  id            String   @id @default(cuid())
  name          String   @unique
  host          String
  port          Int      @default(22)
  ipAddress     String?  // Added missing field
  location      String?  // Added missing field
  maxRam        Int      @default(8192)  // MB
  maxDisk       Int      @default(100)   // GB
  maxServers    Int      @default(10)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  servers Server[]

  @@map("nodes")
}

model Server {
  id          String        @id @default(cuid())
  name        String
  userId      String
  nodeId      String
  dockerId    String?
  ram         Int           @default(1024) // MB
  disk        Int           @default(5)    // GB
  port        Int?
  status      ServerStatus  @default(STOPPED)
  version     String        @default("1.20.1")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  node        Node          @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  logs        ServerLog[]
  connections WSConnection[]

  @@map("servers")
}

model ServerLog {
  id        String   @id @default(cuid())
  serverId  String
  level     String   @default("INFO") // INFO, WARN, ERROR
  message   String
  timestamp DateTime @default(now())

  // Relations
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@map("server_logs")
}

model WSConnection {
  id        String   @id @default(cuid())
  userId    String
  serverId  String?
  socketId  String   @unique
  connectedAt DateTime @default(now())

  // Relations
  server Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@map("ws_connections")
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Int             // Credits (positive for earn, negative for spend)
  description String
  createdAt   DateTime        @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model CreditPackage {
  id          String   @id @default(cuid())
  name        String
  credits     Int
  price       Float    // USD
  popular     Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("credit_packages")
}

model AdCampaign {
  id          String   @id @default(cuid())
  name        String
  provider    String   // "google", "admob", "unity"
  reward      Int      // Credits per completion
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ad_campaigns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  type        TaskType
  reward      Int      // Credits
  url         String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model Ticket {
  id          String       @id @default(cuid())
  userId      String
  subject     String
  message     String
  status      TicketStatus @default(OPEN)
  priority    String       @default("MEDIUM") // LOW, MEDIUM, HIGH
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Settings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  updatedAt     DateTime @updatedAt

  @@map("settings")
}