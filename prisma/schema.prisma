// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  servers     Server[]
  transactions Transaction[]
  adViews     AdView[]
}

model Server {
  id          String      @id @default(cuid())
  name        String
  software    String
  ram         String
  storage     String
  status      ServerStatus @default(STOPPED)
  containerId String?
  nodeId      String
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  node Node @relation(fields: [nodeId], references: [id])

  @@unique([name, userId])
}

model Node {
  id          String     @id @default(cuid())
  name        String     @unique
  ip          String
  port        Int        @default(25575)
  token       String
  status      NodeStatus @default(OFFLINE)
  maxRam      Int        @default(16)
  usedRam     Int        @default(0)
  maxStorage  Int        @default(100)
  usedStorage Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  servers Server[]
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Int
  credits     Int
  status      TransactionStatus @default(PENDING)
  paymentId   String?
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdView {
  id        String   @id @default(cuid())
  userId    String
  adType    String
  credits   Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum ServerStatus {
  RUNNING
  STOPPED
  STARTING
  STOPPING
  ERROR
}

enum NodeStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum TransactionType {
  PURCHASE
  AD_VIEW
  LINK_CLICK
  SERVER_COST
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}