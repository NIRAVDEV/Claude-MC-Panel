// Enhanced Prisma Schema with Node Security & Server-Node Relationships
// This schema includes verification tokens for Wings agents and proper server-node linking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== LUCIA AUTH MODELS ====================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  credits   Int      @default(500)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions     Session[]
  servers      Server[]
  transactions Transaction[]
  tickets      SupportTicket[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
}

// ==================== ENHANCED NODE MANAGEMENT ====================
model Node {
  id              String     @id @default(cuid())
  name            String     @unique
  ip              String
  port            Int        @default(25575)
  maxServers      Int        @default(10)
  maxRAM          Int        @default(32768) // MB
  maxStorage      Int        @default(500000) // MB
  location        String?
  status          NodeStatus @default(OFFLINE)
  description     String?
  scheme         String   @default("https") // "http" or "https"
  behindProxy    Boolean  @default(false)
  maintenanceMode       Boolean  @default(false)
  publicNode            Boolean  @default(true)
  totalMemory           Int      @default(5120)
  memoryOverallocation  Int      @default(0)
  totalDiskSpace        Int      @default(102400)
  diskOverallocation    Int      @default(0)
  daemonPort            Int      @default(8080)
  daemonSftpPort        Int      @default(2022)


  // ðŸ”’ SECURITY: Random verification token for Wings agent
  verificationToken String   @unique @default(cuid())
  
  // Resource tracking
  usedRAM         Int        @default(0)
  usedStorage     Int        @default(0)
  
  // Metadata
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  lastPing        DateTime?

  // Relations - servers now belong to specific nodes
  servers         Server[]

  @@map("nodes")
}

enum NodeStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
}

// ==================== ENHANCED SERVER MANAGEMENT ====================
model Server {
  id          String       @id @default(cuid())
  name        String
  software    String       @default("VANILLA")
  version     String       @default("latest")
  ram         Int          @default(1024) // MB
  storage     Int          @default(5120) // MB
  port        Int?
  status      ServerStatus @default(STOPPED)
  
  // ðŸ”— NODE RELATIONSHIP: Each server belongs to a specific node
  nodeId      String
  node        Node         @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  
  // Container details for Wings agent
  containerId String?      @unique // Docker container ID
  
  // Ownership
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastStart   DateTime?

  // Relations
  logs        ServerLog[]
  backups     ServerBackup[]

  @@unique([name, userId]) // Server names must be unique per user
  @@map("servers")
}

enum ServerStatus {
  CREATING
  CREATED
  RUNNING
  STOPPED
  STARTING
  STOPPING
  RESTARTING
  ERROR
  INSTALLING
  REMOVING
  REMOVED
}

// ==================== ENHANCED LOGGING ====================
model ServerLog {
  id        String   @id @default(cuid())
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  content   String
  level     LogLevel @default(INFO)
  createdAt DateTime @default(now())

  @@map("server_logs")
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

// ==================== SERVER BACKUPS ====================
model ServerBackup {
  id        String   @id @default(cuid())
  serverId  String
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  filename  String
  size      Int      // bytes
  createdAt DateTime @default(now())

  @@map("server_backups")
}

// ==================== WEBSOCKET CONNECTIONS ====================
model WebSocketConnection {
  id         String   @id @default(cuid())
  userId     String?
  serverId   String?
  nodeId     String?  // Track which node the connection is for
  type       String   // 'console', 'logs', 'admin'
  createdAt  DateTime @default(now())
  lastActive DateTime @default(now())

  @@map("websocket_connections")
}

// ==================== CREDIT SYSTEM ====================
model Transaction {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int
  type        TransactionType
  description String
  status      String            @default("COMPLETED")
  metadata    Json?             // For storing additional data
  createdAt   DateTime          @default(now())

  @@map("transactions")
}

enum TransactionType {
  CREDIT_PURCHASE
  SERVER_COST
  ADMIN_CREDITS
  WELCOME_BONUS
  AD_REWARD
  TASK_REWARD
  REFERRAL_BONUS
  ADMIN_ADJUSTMENT
  COMPLETED
  FAILED
  REFUND
}

// ==================== CREDIT PACKAGES ====================
model CreditPackage {
  id          String   @id @default(cuid())
  name        String
  credits     Int
  price       Int      // cents
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("credit_packages")
}

// ==================== AD CAMPAIGNS ====================
model AdCampaign {
  id          String   @id @default(cuid())
  name        String
  credits     Int
  description String?
  active      Boolean  @default(true)
  maxPerUser  Int      @default(5) // Max times per user per day
  createdAt   DateTime @default(now())

  @@map("ad_campaigns")
}

// ==================== SUPPORT SYSTEM ====================
model SupportTicket {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String
  content   String
  status    TicketStatus @default(OPEN)
  priority  Priority     @default(MEDIUM)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  messages  TicketMessage[]

  @@map("support_tickets")
}

model TicketMessage {
  id        String        @id @default(cuid())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  content   String
  isStaff   Boolean       @default(false)
  createdAt DateTime      @default(now())

  @@map("ticket_messages")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ==================== SYSTEM SETTINGS ====================
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("system_settings")
}